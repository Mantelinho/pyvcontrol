#!/usr/bin/env python

# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
# Copyright 2024 Manuel BÃ¶ker https://github.com/Mantelinho/pyvcontrol
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##
#  Python Module for communication with viControl heatings using the serial Optolink interface
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
# ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ## ##


import argparse
import logging
import sys
import json

from pyvcontrol.viControl import viControl


def main():
    parser = argparse.ArgumentParser(
        prog="pyvcontrol",
        description="Communicate with Viessmann heatings using the serial Optolink interface",
        epilog="see https://github.com/joppi588/pyvcontrol for updates",
    )
    parser.add_argument(
        "command",
        help="the command to execute",
    )
    parser.add_argument(
        "-c",
        "--commandset",
        help="the JSON file containing the command set, see conf folder for defaults",
        required=True,
    )
    parser.add_argument(
        "-w",
        "--write",
        help="optional target value for writeable commands",
    )
    parser.add_argument(
        "-l",
        "--logfile",
        help="write info/debug output to logfile instead of stdout",
    )
    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        help="enable debug mode, output will contain loads of information",
    )
    parser.add_argument(
        "-p",
        "--port",
        help="the serial port to use for communication",
        default="/dev/ttyUSB0",
    )
    args = parser.parse_args()

    if args.debug:
        logging.basicConfig(
            level=logging.DEBUG, format="%(asctime)s [%(levelname)s] %(message)s"
        )
    else:
        logging.basicConfig(level=logging.CRITICAL)
        logging.disable()

    try:
        with open(args.commandset, "r") as f:
            command_set = json.load(f)
        vc = viControl(port=args.port, command_set=command_set)
        vc.initialize_communication()
        vd = vc.execute_read_command(args.command)
        logging.debug(f"value={vd.value} raw=0x{vd.hex()}")
    except Exception as e:
        logging.error(e, exc_info=True)
        print(str(e), file=sys.stderr)
        sys.exit(1)
    finally:
        vc.terminate_communication()

    print(f"{vd.value}")


if __name__ == "__main__":
    main()
